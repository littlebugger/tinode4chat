// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// ChatRoom defines model for ChatRoom.
type ChatRoom struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// ChatRoomCreate defines model for ChatRoomCreate.
type ChatRoomCreate struct {
	Name string `json:"name"`
}

// CreateChatRoomJSONRequestBody defines body for CreateChatRoom for application/json ContentType.
type CreateChatRoomJSONRequestBody = ChatRoomCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List available chat rooms
	// (GET /rooms)
	ListChatRooms(ctx echo.Context) error
	// Create a new chat room
	// (POST /rooms)
	CreateChatRoom(ctx echo.Context) error
	// Join a chat room
	// (POST /rooms/{id}/join)
	JoinChatRoom(ctx echo.Context, id string) error
	// Leave a chat room
	// (POST /rooms/{id}/leave)
	LeaveChatRoom(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListChatRooms converts echo context to params.
func (w *ServerInterfaceWrapper) ListChatRooms(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{"email:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListChatRooms(ctx)
	return err
}

// CreateChatRoom converts echo context to params.
func (w *ServerInterfaceWrapper) CreateChatRoom(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{"email:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateChatRoom(ctx)
	return err
}

// JoinChatRoom converts echo context to params.
func (w *ServerInterfaceWrapper) JoinChatRoom(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{"email:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.JoinChatRoom(ctx, id)
	return err
}

// LeaveChatRoom converts echo context to params.
func (w *ServerInterfaceWrapper) LeaveChatRoom(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{"email:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LeaveChatRoom(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/rooms", wrapper.ListChatRooms)
	router.POST(baseURL+"/rooms", wrapper.CreateChatRoom)
	router.POST(baseURL+"/rooms/:id/join", wrapper.JoinChatRoom)
	router.POST(baseURL+"/rooms/:id/leave", wrapper.LeaveChatRoom)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SUS2/bMAzHv4rA7ejW2XbzrS0woEUHDF2BHYIcGJtpFFiPSXQKI/B3HyjVeTUZugew",
	"S6yYEsn/j39rA7Uz3lmyHKHaQKyXZDAtb5bID84ZWfvgPAXWlCK6kV/uPUEFkYO2TzAUYNHQicBQjG/c",
	"fEU1y9Yx900gZHpd4XyqQD86HaiBapp3zV6lHwqIVHdBcw/VdAPXhIHCVcdLqKazYbYLfxO1ueL+pg3M",
	"07/PLhhkqODu+yMUmY0UylHYFl4yexikrrYLl/rW3ErkgbC9eNSGlChWV19v1YUaxasvrulaggLWFKJ2",
	"Fir4cDm5nAgh58mi11DBp/SqAI+8TK2WwTmTVk/E8hByyNrZ2wYquNeRxxIRhFj0zsYs8+NkIo/aWSab",
	"DqP3ra7T8XIVpYnRBWnUTLnU+0ALqOBdufNL+WKWcuuU3agxBOwzk4ZiHbTnLFC6U26hauGRhZwZmEyY",
	"DOq2eoY8tc4YDP2YBNeoW5y3dJCrAO/iCSrZadtOs5Eo8rVr+t8i8hYQL7YeDg3LoaPh9DwOGd2MelSd",
	"EjUqdnVNMS66tu3/gFfuR6Gy9LyjlRJlM5Ub3Qzlyukk9jTBO6ftHj+PAQ0xhZh6kJPJojBeBHJNHMsv",
	"9kAef9uzt6CRJqjJcP4SiqRS+AscLeGazvO4l/B/B3JPC/4nOJKcIx7D8DMAAP//0MCDNSAGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
