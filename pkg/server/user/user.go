// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// UserLogin defines model for UserLogin.
type UserLogin struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	Email    *string `json:"email,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UserSignup defines model for UserSignup.
type UserSignup struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = UserLogin

// SignupUserJSONRequestBody defines body for SignupUser for application/json ContentType.
type SignupUserJSONRequestBody = UserSignup

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in a user
	// (POST /login)
	LoginUser(ctx echo.Context) error
	// Get user profile
	// (GET /profile)
	GetUserProfile(ctx echo.Context) error
	// Register a new user
	// (POST /signup)
	SignupUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetUserProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{"email:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserProfile(ctx)
	return err
}

// SignupUser converts echo context to params.
func (w *ServerInterfaceWrapper) SignupUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignupUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.LoginUser)
	router.GET(baseURL+"/profile", wrapper.GetUserProfile)
	router.POST(baseURL+"/signup", wrapper.SignupUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7SUwW7bMAyGX0XgdnTrbLvp1g5Y0WIDirZDD0UPqs0k6mxJI6kFQeB3HyQlcTp4a4tt",
	"J8uSKfL/+dEbaHwfvEMnDHoD3CyxN3n5lZE++4V16SWQD0hiMR9hb2yXFrIOCBpYyLoFDBUEw7zy1E4c",
	"DhUQfo+WsAV9t73jIOK+2kX4h0dsJF2XargkP7cdvqaKyEjO9DhdxWSWa7twMfwjqc9VMOXDPuKPlgwV",
	"MDaRrKxB323gFA0hnURZgr67H+7H4+vUyaLh8KMNPOS3T556I6Dh4vYGqtL3lKicwj7xUiTAkPJaN/dZ",
	"jpXUDbhC0x3d2B7Vx6URdXJ5ro5UslJ98W3skpAfSGy9Aw3vjmfHs2SMD+hMsKDhQ95KamWZy6y7PW2e",
	"JT1TI4xY785b0JBhTAmgOIgsp75dpw8b7wRdjjEhdLbJUfUjezdSnVZvCeeg4U09Yl9vma9H4IenTRKK",
	"mDc4eMfF0/ez2asSP6VK/Dd0L6IzbbXIDdkgxcpcouLYNMg8j12lCCWSY3Vxe6PKzZmT2PeG1iVCWaeM",
	"SozlszqMQ7XACa/PUA5n7y/FP+f6Ls2E2gzUtlrVGjG/m4H9LOkVlEHY6z9DydJ39xQLeJz4SdzKH+E/",
	"87b97bwcuAl3GkIj2B4g0a1/IeAKF5YFSRnlcLXjYBh+BgAA///gS/10/wUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
