// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// UserLogin defines model for UserLogin.
type UserLogin struct {
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	Email    *string `json:"email,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UserSignup defines model for UserSignup.
type UserSignup struct {
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = UserLogin

// SignupUserJSONRequestBody defines body for SignupUser for application/json ContentType.
type SignupUserJSONRequestBody = UserSignup

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in a user
	// (POST /login)
	LoginUser(ctx echo.Context) error
	// Get user profile
	// (GET /profile)
	GetUserProfile(ctx echo.Context) error
	// Register a new user
	// (POST /signup)
	SignupUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetUserProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserProfile(ctx)
	return err
}

// SignupUser converts echo context to params.
func (w *ServerInterfaceWrapper) SignupUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignupUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.LoginUser)
	router.GET(baseURL+"/profile", wrapper.GetUserProfile)
	router.POST(baseURL+"/signup", wrapper.SignupUser)

}

type LoginUserRequestObject struct {
	Body *LoginUserJSONRequestBody
}

type LoginUserResponseObject interface {
	VisitLoginUserResponse(w http.ResponseWriter) error
}

type LoginUser200JSONResponse struct {
	Token *string `json:"token,omitempty"`
}

func (response LoginUser200JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserProfileRequestObject struct {
}

type GetUserProfileResponseObject interface {
	VisitGetUserProfileResponse(w http.ResponseWriter) error
}

type GetUserProfile200JSONResponse UserProfile

func (response GetUserProfile200JSONResponse) VisitGetUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignupUserRequestObject struct {
	Body *SignupUserJSONRequestBody
}

type SignupUserResponseObject interface {
	VisitSignupUserResponse(w http.ResponseWriter) error
}

type SignupUser200Response struct {
}

func (response SignupUser200Response) VisitSignupUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Log in a user
	// (POST /login)
	LoginUser(ctx context.Context, request LoginUserRequestObject) (LoginUserResponseObject, error)
	// Get user profile
	// (GET /profile)
	GetUserProfile(ctx context.Context, request GetUserProfileRequestObject) (GetUserProfileResponseObject, error)
	// Register a new user
	// (POST /signup)
	SignupUser(ctx context.Context, request SignupUserRequestObject) (SignupUserResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// LoginUser operation middleware
func (sh *strictHandler) LoginUser(ctx echo.Context) error {
	var request LoginUserRequestObject

	var body LoginUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LoginUser(ctx.Request().Context(), request.(LoginUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginUserResponseObject); ok {
		return validResponse.VisitLoginUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserProfile operation middleware
func (sh *strictHandler) GetUserProfile(ctx echo.Context) error {
	var request GetUserProfileRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserProfile(ctx.Request().Context(), request.(GetUserProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserProfileResponseObject); ok {
		return validResponse.VisitGetUserProfileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SignupUser operation middleware
func (sh *strictHandler) SignupUser(ctx echo.Context) error {
	var request SignupUserRequestObject

	var body SignupUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignupUser(ctx.Request().Context(), request.(SignupUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignupUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SignupUserResponseObject); ok {
		return validResponse.VisitSignupUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RTX28TMQz/KpHhsdsVeLs34GEaAmkaQzyHnHvNuLOD7TBVU787Sq7lxnQSq2BPTR37",
	"fv79yT0EHhMTkim096Bhi6Ovxy+K8pH7SOVPEk4oFrFe4ejjUA62SwgtqEmkHvYrSF71jqVbuNyvjhX+",
	"dovBSnvBuBLexAFPQcmKQn7EE1A+x55y+k9UTtyglCJtuDZHK1zhGv1wdhNHdO+33tzbq0t35sqi7hN3",
	"eUBYwU8UjUzQwqvz9fm6wHJC8ilCC29qqWxp20qkGX57xWrlt9D0FpkuO2ihWlkAYAWCPzKqveNuVxoD",
	"kyHVGZ/SEEOdam6Vac5EOb0U3EALL5o5NM0hMc0cl8q3QETBDlqTjLWgiUkn1V+v1ycB/+mZ8XekJyvf",
	"oQaJySYp64pOcwiousnDyglaFlL34euNm75cpjSPo5fdNOEiOe+K5/WuSXNke1zQ+gLtYbL/kfzfVD/C",
	"LLCtgTps6zpv/hG3C7RK69gz0dP5rSxGaXpLz5ylw4N9epgWmAdBb9g9sHvYPVLgGvuohuK8I7w7erzf",
	"/woAAP//ccWMlhkFAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
