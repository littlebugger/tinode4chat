// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Message defines model for Message.
type Message struct {
	Author    *string `json:"author,omitempty"`
	Content   *string `json:"content,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// MessageCreate defines model for MessageCreate.
type MessageCreate struct {
	Content *string `json:"content,omitempty"`
}

// SendMessageToChatRoomJSONRequestBody defines body for SendMessageToChatRoom for application/json ContentType.
type SendMessageToChatRoomJSONRequestBody = MessageCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get chat room messages
	// (GET /rooms/{id}/messages)
	GetChatRoomMessages(ctx echo.Context, id string) error
	// Send a message to a chat room
	// (POST /rooms/{id}/messages)
	SendMessageToChatRoom(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetChatRoomMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetChatRoomMessages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetChatRoomMessages(ctx, id)
	return err
}

// SendMessageToChatRoom converts echo context to params.
func (w *ServerInterfaceWrapper) SendMessageToChatRoom(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendMessageToChatRoom(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/rooms/:id/messages", wrapper.GetChatRoomMessages)
	router.POST(baseURL+"/rooms/:id/messages", wrapper.SendMessageToChatRoom)

}

type GetChatRoomMessagesRequestObject struct {
	Id string `json:"id"`
}

type GetChatRoomMessagesResponseObject interface {
	VisitGetChatRoomMessagesResponse(w http.ResponseWriter) error
}

type GetChatRoomMessages200JSONResponse []Message

func (response GetChatRoomMessages200JSONResponse) VisitGetChatRoomMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SendMessageToChatRoomRequestObject struct {
	Id   string `json:"id"`
	Body *SendMessageToChatRoomJSONRequestBody
}

type SendMessageToChatRoomResponseObject interface {
	VisitSendMessageToChatRoomResponse(w http.ResponseWriter) error
}

type SendMessageToChatRoom200Response struct {
}

func (response SendMessageToChatRoom200Response) VisitSendMessageToChatRoomResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get chat room messages
	// (GET /rooms/{id}/messages)
	GetChatRoomMessages(ctx context.Context, request GetChatRoomMessagesRequestObject) (GetChatRoomMessagesResponseObject, error)
	// Send a message to a chat room
	// (POST /rooms/{id}/messages)
	SendMessageToChatRoom(ctx context.Context, request SendMessageToChatRoomRequestObject) (SendMessageToChatRoomResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetChatRoomMessages operation middleware
func (sh *strictHandler) GetChatRoomMessages(ctx echo.Context, id string) error {
	var request GetChatRoomMessagesRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatRoomMessages(ctx.Request().Context(), request.(GetChatRoomMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatRoomMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetChatRoomMessagesResponseObject); ok {
		return validResponse.VisitGetChatRoomMessagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SendMessageToChatRoom operation middleware
func (sh *strictHandler) SendMessageToChatRoom(ctx echo.Context, id string) error {
	var request SendMessageToChatRoomRequestObject

	request.Id = id

	var body SendMessageToChatRoomJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendMessageToChatRoom(ctx.Request().Context(), request.(SendMessageToChatRoomRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendMessageToChatRoom")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SendMessageToChatRoomResponseObject); ok {
		return validResponse.VisitSendMessageToChatRoomResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7SSQW/UQAyF/8rIcEybBW65QQ+oEiuh0hviYBLv7lSZ8XTsIEXR/nfkScK2JUhw4Day",
	"X/xePnuClkPiSFEFmgmkPVHA8tyTCB7JnilzoqyeSgMHPXG2l46JoAHR7OMRzhW0HJWibvbUBxLFkDa6",
	"1p4r/P2BWjX94n+TCXUjxZ+tfh9mJR8PXMRee+vdEfZX9z6Quzmhuvefb92VWzzdnruhJ6jgB2XxHKGB",
	"N9e7653l4kQRk4cG3pVSBQn1VDLVmTlIPfnuXId5VKkfqeS0+Kie420HDXwkNec75rBftTYrYyClLNB8",
	"ncCbtc2HCiIGC+47qCDT4+AzddBoHqha9rYF45uJJXGUOcvb3e4FPkyp920JVj+I/ez0ZJ5XCuXD15kO",
	"0MCr+nIx9XIu9XorF/SYM44z+Y6kzT7pzPGTF3V8cL/4mESGEDCPMxXX2kIM5RNRBYllg+IXit3ifs8r",
	"z//G8XEg0Q/cjf+E8C/ILVdeeD3PdN7e33Oo690KRXUytC2JHIa+H1/QNVoOV6xO2eGFtrmffwYAAP//",
	"zlGiHxEEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
