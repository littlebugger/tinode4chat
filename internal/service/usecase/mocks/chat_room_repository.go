// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/littlebugger/tinode4chat/internal/service/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockChatRoomRepository is an autogenerated mock type for the ChatRoomRepository type
type MockChatRoomRepository struct {
	mock.Mock
}

type MockChatRoomRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChatRoomRepository) EXPECT() *MockChatRoomRepository_Expecter {
	return &MockChatRoomRepository_Expecter{mock: &_m.Mock}
}

// AddUserToChatRoom provides a mock function with given fields: ctx, roomID, userID
func (_m *MockChatRoomRepository) AddUserToChatRoom(ctx context.Context, roomID string, userID string) error {
	ret := _m.Called(ctx, roomID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToChatRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roomID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChatRoomRepository_AddUserToChatRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToChatRoom'
type MockChatRoomRepository_AddUserToChatRoom_Call struct {
	*mock.Call
}

// AddUserToChatRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - roomID string
//   - userID string
func (_e *MockChatRoomRepository_Expecter) AddUserToChatRoom(ctx interface{}, roomID interface{}, userID interface{}) *MockChatRoomRepository_AddUserToChatRoom_Call {
	return &MockChatRoomRepository_AddUserToChatRoom_Call{Call: _e.mock.On("AddUserToChatRoom", ctx, roomID, userID)}
}

func (_c *MockChatRoomRepository_AddUserToChatRoom_Call) Run(run func(ctx context.Context, roomID string, userID string)) *MockChatRoomRepository_AddUserToChatRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChatRoomRepository_AddUserToChatRoom_Call) Return(_a0 error) *MockChatRoomRepository_AddUserToChatRoom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChatRoomRepository_AddUserToChatRoom_Call) RunAndReturn(run func(context.Context, string, string) error) *MockChatRoomRepository_AddUserToChatRoom_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChatRoom provides a mock function with given fields: ctx, room
func (_m *MockChatRoomRepository) CreateChatRoom(ctx context.Context, room entity.ChatRoom) (*string, error) {
	ret := _m.Called(ctx, room)

	if len(ret) == 0 {
		panic("no return value specified for CreateChatRoom")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ChatRoom) (*string, error)); ok {
		return rf(ctx, room)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ChatRoom) *string); ok {
		r0 = rf(ctx, room)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ChatRoom) error); ok {
		r1 = rf(ctx, room)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatRoomRepository_CreateChatRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChatRoom'
type MockChatRoomRepository_CreateChatRoom_Call struct {
	*mock.Call
}

// CreateChatRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - room entity.ChatRoom
func (_e *MockChatRoomRepository_Expecter) CreateChatRoom(ctx interface{}, room interface{}) *MockChatRoomRepository_CreateChatRoom_Call {
	return &MockChatRoomRepository_CreateChatRoom_Call{Call: _e.mock.On("CreateChatRoom", ctx, room)}
}

func (_c *MockChatRoomRepository_CreateChatRoom_Call) Run(run func(ctx context.Context, room entity.ChatRoom)) *MockChatRoomRepository_CreateChatRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ChatRoom))
	})
	return _c
}

func (_c *MockChatRoomRepository_CreateChatRoom_Call) Return(_a0 *string, _a1 error) *MockChatRoomRepository_CreateChatRoom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChatRoomRepository_CreateChatRoom_Call) RunAndReturn(run func(context.Context, entity.ChatRoom) (*string, error)) *MockChatRoomRepository_CreateChatRoom_Call {
	_c.Call.Return(run)
	return _c
}

// IsRoomExist provides a mock function with given fields: ctx, name
func (_m *MockChatRoomRepository) IsRoomExist(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for IsRoomExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatRoomRepository_IsRoomExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRoomExist'
type MockChatRoomRepository_IsRoomExist_Call struct {
	*mock.Call
}

// IsRoomExist is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockChatRoomRepository_Expecter) IsRoomExist(ctx interface{}, name interface{}) *MockChatRoomRepository_IsRoomExist_Call {
	return &MockChatRoomRepository_IsRoomExist_Call{Call: _e.mock.On("IsRoomExist", ctx, name)}
}

func (_c *MockChatRoomRepository_IsRoomExist_Call) Run(run func(ctx context.Context, name string)) *MockChatRoomRepository_IsRoomExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockChatRoomRepository_IsRoomExist_Call) Return(_a0 bool, _a1 error) *MockChatRoomRepository_IsRoomExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChatRoomRepository_IsRoomExist_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockChatRoomRepository_IsRoomExist_Call {
	_c.Call.Return(run)
	return _c
}

// ListChatRooms provides a mock function with given fields: ctx
func (_m *MockChatRoomRepository) ListChatRooms(ctx context.Context) ([]entity.ChatRoom, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListChatRooms")
	}

	var r0 []entity.ChatRoom
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.ChatRoom, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.ChatRoom); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ChatRoom)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatRoomRepository_ListChatRooms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChatRooms'
type MockChatRoomRepository_ListChatRooms_Call struct {
	*mock.Call
}

// ListChatRooms is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockChatRoomRepository_Expecter) ListChatRooms(ctx interface{}) *MockChatRoomRepository_ListChatRooms_Call {
	return &MockChatRoomRepository_ListChatRooms_Call{Call: _e.mock.On("ListChatRooms", ctx)}
}

func (_c *MockChatRoomRepository_ListChatRooms_Call) Run(run func(ctx context.Context)) *MockChatRoomRepository_ListChatRooms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockChatRoomRepository_ListChatRooms_Call) Return(_a0 []entity.ChatRoom, _a1 error) *MockChatRoomRepository_ListChatRooms_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChatRoomRepository_ListChatRooms_Call) RunAndReturn(run func(context.Context) ([]entity.ChatRoom, error)) *MockChatRoomRepository_ListChatRooms_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromChatRoom provides a mock function with given fields: ctx, roomID, userID
func (_m *MockChatRoomRepository) RemoveUserFromChatRoom(ctx context.Context, roomID string, userID string) error {
	ret := _m.Called(ctx, roomID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromChatRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roomID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChatRoomRepository_RemoveUserFromChatRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromChatRoom'
type MockChatRoomRepository_RemoveUserFromChatRoom_Call struct {
	*mock.Call
}

// RemoveUserFromChatRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - roomID string
//   - userID string
func (_e *MockChatRoomRepository_Expecter) RemoveUserFromChatRoom(ctx interface{}, roomID interface{}, userID interface{}) *MockChatRoomRepository_RemoveUserFromChatRoom_Call {
	return &MockChatRoomRepository_RemoveUserFromChatRoom_Call{Call: _e.mock.On("RemoveUserFromChatRoom", ctx, roomID, userID)}
}

func (_c *MockChatRoomRepository_RemoveUserFromChatRoom_Call) Run(run func(ctx context.Context, roomID string, userID string)) *MockChatRoomRepository_RemoveUserFromChatRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChatRoomRepository_RemoveUserFromChatRoom_Call) Return(_a0 error) *MockChatRoomRepository_RemoveUserFromChatRoom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChatRoomRepository_RemoveUserFromChatRoom_Call) RunAndReturn(run func(context.Context, string, string) error) *MockChatRoomRepository_RemoveUserFromChatRoom_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChatRoomRepository creates a new instance of MockChatRoomRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChatRoomRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChatRoomRepository {
	mock := &MockChatRoomRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
